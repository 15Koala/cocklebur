/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ElectionServ_H
#define ElectionServ_H

#include <thrift/TDispatchProcessor.h>
#include "leader_election_types.h"



class ElectionServIf {
 public:
  virtual ~ElectionServIf() {}
  virtual void exchange(Voter& _return, const Voter& v) = 0;
  virtual bool isLargest(const Voter& v) = 0;
  virtual void sendMessage(const std::string& message) = 0;
};

class ElectionServIfFactory {
 public:
  typedef ElectionServIf Handler;

  virtual ~ElectionServIfFactory() {}

  virtual ElectionServIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ElectionServIf* /* handler */) = 0;
};

class ElectionServIfSingletonFactory : virtual public ElectionServIfFactory {
 public:
  ElectionServIfSingletonFactory(const boost::shared_ptr<ElectionServIf>& iface) : iface_(iface) {}
  virtual ~ElectionServIfSingletonFactory() {}

  virtual ElectionServIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ElectionServIf* /* handler */) {}

 protected:
  boost::shared_ptr<ElectionServIf> iface_;
};

class ElectionServNull : virtual public ElectionServIf {
 public:
  virtual ~ElectionServNull() {}
  void exchange(Voter& /* _return */, const Voter& /* v */) {
    return;
  }
  bool isLargest(const Voter& /* v */) {
    bool _return = false;
    return _return;
  }
  void sendMessage(const std::string& /* message */) {
    return;
  }
};

typedef struct _ElectionServ_exchange_args__isset {
  _ElectionServ_exchange_args__isset() : v(false) {}
  bool v;
} _ElectionServ_exchange_args__isset;

class ElectionServ_exchange_args {
 public:

  ElectionServ_exchange_args() {
  }

  virtual ~ElectionServ_exchange_args() throw() {}

  Voter v;

  _ElectionServ_exchange_args__isset __isset;

  void __set_v(const Voter& val) {
    v = val;
  }

  bool operator == (const ElectionServ_exchange_args & rhs) const
  {
    if (!(v == rhs.v))
      return false;
    return true;
  }
  bool operator != (const ElectionServ_exchange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ElectionServ_exchange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ElectionServ_exchange_pargs {
 public:


  virtual ~ElectionServ_exchange_pargs() throw() {}

  const Voter* v;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ElectionServ_exchange_result__isset {
  _ElectionServ_exchange_result__isset() : success(false) {}
  bool success;
} _ElectionServ_exchange_result__isset;

class ElectionServ_exchange_result {
 public:

  ElectionServ_exchange_result() {
  }

  virtual ~ElectionServ_exchange_result() throw() {}

  Voter success;

  _ElectionServ_exchange_result__isset __isset;

  void __set_success(const Voter& val) {
    success = val;
  }

  bool operator == (const ElectionServ_exchange_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ElectionServ_exchange_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ElectionServ_exchange_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ElectionServ_exchange_presult__isset {
  _ElectionServ_exchange_presult__isset() : success(false) {}
  bool success;
} _ElectionServ_exchange_presult__isset;

class ElectionServ_exchange_presult {
 public:


  virtual ~ElectionServ_exchange_presult() throw() {}

  Voter* success;

  _ElectionServ_exchange_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ElectionServ_isLargest_args__isset {
  _ElectionServ_isLargest_args__isset() : v(false) {}
  bool v;
} _ElectionServ_isLargest_args__isset;

class ElectionServ_isLargest_args {
 public:

  ElectionServ_isLargest_args() {
  }

  virtual ~ElectionServ_isLargest_args() throw() {}

  Voter v;

  _ElectionServ_isLargest_args__isset __isset;

  void __set_v(const Voter& val) {
    v = val;
  }

  bool operator == (const ElectionServ_isLargest_args & rhs) const
  {
    if (!(v == rhs.v))
      return false;
    return true;
  }
  bool operator != (const ElectionServ_isLargest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ElectionServ_isLargest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ElectionServ_isLargest_pargs {
 public:


  virtual ~ElectionServ_isLargest_pargs() throw() {}

  const Voter* v;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ElectionServ_isLargest_result__isset {
  _ElectionServ_isLargest_result__isset() : success(false) {}
  bool success;
} _ElectionServ_isLargest_result__isset;

class ElectionServ_isLargest_result {
 public:

  ElectionServ_isLargest_result() : success(0) {
  }

  virtual ~ElectionServ_isLargest_result() throw() {}

  bool success;

  _ElectionServ_isLargest_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ElectionServ_isLargest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ElectionServ_isLargest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ElectionServ_isLargest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ElectionServ_isLargest_presult__isset {
  _ElectionServ_isLargest_presult__isset() : success(false) {}
  bool success;
} _ElectionServ_isLargest_presult__isset;

class ElectionServ_isLargest_presult {
 public:


  virtual ~ElectionServ_isLargest_presult() throw() {}

  bool* success;

  _ElectionServ_isLargest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ElectionServ_sendMessage_args__isset {
  _ElectionServ_sendMessage_args__isset() : message(false) {}
  bool message;
} _ElectionServ_sendMessage_args__isset;

class ElectionServ_sendMessage_args {
 public:

  ElectionServ_sendMessage_args() : message() {
  }

  virtual ~ElectionServ_sendMessage_args() throw() {}

  std::string message;

  _ElectionServ_sendMessage_args__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ElectionServ_sendMessage_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ElectionServ_sendMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ElectionServ_sendMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ElectionServ_sendMessage_pargs {
 public:


  virtual ~ElectionServ_sendMessage_pargs() throw() {}

  const std::string* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ElectionServClient : virtual public ElectionServIf {
 public:
  ElectionServClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ElectionServClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void exchange(Voter& _return, const Voter& v);
  void send_exchange(const Voter& v);
  void recv_exchange(Voter& _return);
  bool isLargest(const Voter& v);
  void send_isLargest(const Voter& v);
  bool recv_isLargest();
  void sendMessage(const std::string& message);
  void send_sendMessage(const std::string& message);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ElectionServProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ElectionServIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ElectionServProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_exchange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isLargest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ElectionServProcessor(boost::shared_ptr<ElectionServIf> iface) :
    iface_(iface) {
    processMap_["exchange"] = &ElectionServProcessor::process_exchange;
    processMap_["isLargest"] = &ElectionServProcessor::process_isLargest;
    processMap_["sendMessage"] = &ElectionServProcessor::process_sendMessage;
  }

  virtual ~ElectionServProcessor() {}
};

class ElectionServProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ElectionServProcessorFactory(const ::boost::shared_ptr< ElectionServIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ElectionServIfFactory > handlerFactory_;
};

class ElectionServMultiface : virtual public ElectionServIf {
 public:
  ElectionServMultiface(std::vector<boost::shared_ptr<ElectionServIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ElectionServMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ElectionServIf> > ifaces_;
  ElectionServMultiface() {}
  void add(boost::shared_ptr<ElectionServIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void exchange(Voter& _return, const Voter& v) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->exchange(_return, v);
    }
    ifaces_[i]->exchange(_return, v);
    return;
  }

  bool isLargest(const Voter& v) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isLargest(v);
    }
    return ifaces_[i]->isLargest(v);
  }

  void sendMessage(const std::string& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMessage(message);
    }
    ifaces_[i]->sendMessage(message);
  }

};



#endif
