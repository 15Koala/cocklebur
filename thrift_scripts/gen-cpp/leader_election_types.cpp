/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "leader_election_types.h"

#include <algorithm>



const char* HostStat::ascii_fingerprint = "2F894C810EBADC6D927C5CAE9A715D84";
const uint8_t HostStat::binary_fingerprint[16] = {0x2F,0x89,0x4C,0x81,0x0E,0xBA,0xDC,0x6D,0x92,0x7C,0x5C,0xAE,0x9A,0x71,0x5D,0x84};

uint32_t HostStat::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->xid);
          this->__isset.xid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->known_hosts.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readSetBegin(_etype3, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _elem5;
              xfer += iprot->readString(_elem5);
              this->known_hosts.insert(_elem5);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.known_hosts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->heard_from.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readSetBegin(_etype9, _size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              std::string _elem11;
              xfer += iprot->readString(_elem11);
              this->heard_from.insert(_elem11);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.heard_from = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->alive_hosts.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readSetBegin(_etype15, _size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              std::string _elem17;
              xfer += iprot->readString(_elem17);
              this->alive_hosts.insert(_elem17);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.alive_hosts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->my_host_name);
          this->__isset.my_host_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rec_host);
          this->__isset.rec_host = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->logical_clock);
          this->__isset.logical_clock = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HostStat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HostStat");

  xfer += oprot->writeFieldBegin("xid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->xid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("known_hosts", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->known_hosts.size()));
    std::set<std::string> ::const_iterator _iter18;
    for (_iter18 = this->known_hosts.begin(); _iter18 != this->known_hosts.end(); ++_iter18)
    {
      xfer += oprot->writeString((*_iter18));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("heard_from", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->heard_from.size()));
    std::set<std::string> ::const_iterator _iter19;
    for (_iter19 = this->heard_from.begin(); _iter19 != this->heard_from.end(); ++_iter19)
    {
      xfer += oprot->writeString((*_iter19));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alive_hosts", ::apache::thrift::protocol::T_SET, 4);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->alive_hosts.size()));
    std::set<std::string> ::const_iterator _iter20;
    for (_iter20 = this->alive_hosts.begin(); _iter20 != this->alive_hosts.end(); ++_iter20)
    {
      xfer += oprot->writeString((*_iter20));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("my_host_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->my_host_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rec_host", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->rec_host);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logical_clock", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->logical_clock);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HostStat &a, HostStat &b) {
  using ::std::swap;
  swap(a.xid, b.xid);
  swap(a.known_hosts, b.known_hosts);
  swap(a.heard_from, b.heard_from);
  swap(a.alive_hosts, b.alive_hosts);
  swap(a.my_host_name, b.my_host_name);
  swap(a.rec_host, b.rec_host);
  swap(a.logical_clock, b.logical_clock);
  swap(a.__isset, b.__isset);
}

const char* Voter::ascii_fingerprint = "A4B066E6E9E7A4AAC1E65BBE24B7905C";
const uint8_t Voter::binary_fingerprint[16] = {0xA4,0xB0,0x66,0xE6,0xE9,0xE7,0xA4,0xAA,0xC1,0xE6,0x5B,0xBE,0x24,0xB7,0x90,0x5C};

uint32_t Voter::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rec_host);
          this->__isset.rec_host = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->my_host_name);
          this->__isset.my_host_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->xid);
          this->__isset.xid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->known_hosts.clear();
            uint32_t _size21;
            ::apache::thrift::protocol::TType _etype24;
            xfer += iprot->readSetBegin(_etype24, _size21);
            uint32_t _i25;
            for (_i25 = 0; _i25 < _size21; ++_i25)
            {
              std::string _elem26;
              xfer += iprot->readString(_elem26);
              this->known_hosts.insert(_elem26);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.known_hosts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->logical_clock);
          this->__isset.logical_clock = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cur_node_mode);
          this->__isset.cur_node_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Voter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Voter");

  xfer += oprot->writeFieldBegin("rec_host", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->rec_host);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("my_host_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->my_host_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xid", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->xid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("known_hosts", ::apache::thrift::protocol::T_SET, 4);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->known_hosts.size()));
    std::set<std::string> ::const_iterator _iter27;
    for (_iter27 = this->known_hosts.begin(); _iter27 != this->known_hosts.end(); ++_iter27)
    {
      xfer += oprot->writeString((*_iter27));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logical_clock", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->logical_clock);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cur_node_mode", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->cur_node_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Voter &a, Voter &b) {
  using ::std::swap;
  swap(a.rec_host, b.rec_host);
  swap(a.my_host_name, b.my_host_name);
  swap(a.xid, b.xid);
  swap(a.known_hosts, b.known_hosts);
  swap(a.logical_clock, b.logical_clock);
  swap(a.cur_node_mode, b.cur_node_mode);
  swap(a.__isset, b.__isset);
}

const char* HBMSG::ascii_fingerprint = "86D97BA61768267A7CE47610E95DE354";
const uint8_t HBMSG::binary_fingerprint[16] = {0x86,0xD9,0x7B,0xA6,0x17,0x68,0x26,0x7A,0x7C,0xE4,0x76,0x10,0xE9,0x5D,0xE3,0x54};

uint32_t HBMSG::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->my_host_name);
          this->__isset.my_host_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cur_node_mode);
          this->__isset.cur_node_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->xid);
          this->__isset.xid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HBMSG::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HBMSG");

  xfer += oprot->writeFieldBegin("my_host_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->my_host_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cur_node_mode", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->cur_node_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xid", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->xid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HBMSG &a, HBMSG &b) {
  using ::std::swap;
  swap(a.my_host_name, b.my_host_name);
  swap(a.cur_node_mode, b.cur_node_mode);
  swap(a.xid, b.xid);
  swap(a.__isset, b.__isset);
}


