/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef data_holder_TYPES_H
#define data_holder_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _LogEntry__isset {
  _LogEntry__isset() : xid(false), ts(false), oper(false), content(false) {}
  bool xid;
  bool ts;
  bool oper;
  bool content;
} _LogEntry__isset;

class LogEntry {
 public:

  static const char* ascii_fingerprint; // = "30385074F1AB07974C5EA28F52541C30";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0x38,0x50,0x74,0xF1,0xAB,0x07,0x97,0x4C,0x5E,0xA2,0x8F,0x52,0x54,0x1C,0x30};

  LogEntry() : xid(0), ts(0), oper(0), content() {
  }

  virtual ~LogEntry() throw() {}

  int64_t xid;
  int64_t ts;
  int8_t oper;
  std::string content;

  _LogEntry__isset __isset;

  void __set_xid(const int64_t val) {
    xid = val;
  }

  void __set_ts(const int64_t val) {
    ts = val;
  }

  void __set_oper(const int8_t val) {
    oper = val;
  }

  void __set_content(const std::string& val) {
    content = val;
  }

  bool operator == (const LogEntry & rhs) const
  {
    if (!(xid == rhs.xid))
      return false;
    if (!(ts == rhs.ts))
      return false;
    if (!(oper == rhs.oper))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const LogEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LogEntry &a, LogEntry &b);

typedef struct _Node__isset {
  _Node__isset() : children(false), parent(false), ctime(false), mtime(false), data(false), data_version(false), path(false) {}
  bool children;
  bool parent;
  bool ctime;
  bool mtime;
  bool data;
  bool data_version;
  bool path;
} _Node__isset;

class Node {
 public:

  static const char* ascii_fingerprint; // = "FE69B4D3C6F0582846BA70AA4D055D85";
  static const uint8_t binary_fingerprint[16]; // = {0xFE,0x69,0xB4,0xD3,0xC6,0xF0,0x58,0x28,0x46,0xBA,0x70,0xAA,0x4D,0x05,0x5D,0x85};

  Node() : parent(), ctime(0), mtime(0), data(), data_version(0), path() {
  }

  virtual ~Node() throw() {}

  std::set<std::string>  children;
  std::string parent;
  int64_t ctime;
  int64_t mtime;
  std::string data;
  int64_t data_version;
  std::string path;

  _Node__isset __isset;

  void __set_children(const std::set<std::string> & val) {
    children = val;
  }

  void __set_parent(const std::string& val) {
    parent = val;
  }

  void __set_ctime(const int64_t val) {
    ctime = val;
  }

  void __set_mtime(const int64_t val) {
    mtime = val;
  }

  void __set_data(const std::string& val) {
    data = val;
  }

  void __set_data_version(const int64_t val) {
    data_version = val;
  }

  void __set_path(const std::string& val) {
    path = val;
  }

  bool operator == (const Node & rhs) const
  {
    if (!(children == rhs.children))
      return false;
    if (!(parent == rhs.parent))
      return false;
    if (!(ctime == rhs.ctime))
      return false;
    if (!(mtime == rhs.mtime))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(data_version == rhs.data_version))
      return false;
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const Node &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Node & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Node &a, Node &b);

typedef struct _DataTree__isset {
  _DataTree__isset() : NodeMap(false), xid(false), ephemerals(false) {}
  bool NodeMap;
  bool xid;
  bool ephemerals;
} _DataTree__isset;

class DataTree {
 public:

  static const char* ascii_fingerprint; // = "6CFB3B13C6E1C5AE61CA1F93297D1D8D";
  static const uint8_t binary_fingerprint[16]; // = {0x6C,0xFB,0x3B,0x13,0xC6,0xE1,0xC5,0xAE,0x61,0xCA,0x1F,0x93,0x29,0x7D,0x1D,0x8D};

  DataTree() : xid(0) {
  }

  virtual ~DataTree() throw() {}

  std::map<std::string, Node>  NodeMap;
  int64_t xid;
  std::map<std::string, Node>  ephemerals;

  _DataTree__isset __isset;

  void __set_NodeMap(const std::map<std::string, Node> & val) {
    NodeMap = val;
  }

  void __set_xid(const int64_t val) {
    xid = val;
  }

  void __set_ephemerals(const std::map<std::string, Node> & val) {
    ephemerals = val;
  }

  bool operator == (const DataTree & rhs) const
  {
    if (!(NodeMap == rhs.NodeMap))
      return false;
    if (!(xid == rhs.xid))
      return false;
    if (!(ephemerals == rhs.ephemerals))
      return false;
    return true;
  }
  bool operator != (const DataTree &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataTree & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DataTree &a, DataTree &b);



#endif
