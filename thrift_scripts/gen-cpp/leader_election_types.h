/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef leader_election_TYPES_H
#define leader_election_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _HostStat__isset {
  _HostStat__isset() : xid(false), known_hosts(false), heard_from(false), alive_hosts(false), my_host_name(false), rec_host(false), logical_clock(false) {}
  bool xid;
  bool known_hosts;
  bool heard_from;
  bool alive_hosts;
  bool my_host_name;
  bool rec_host;
  bool logical_clock;
} _HostStat__isset;

class HostStat {
 public:

  static const char* ascii_fingerprint; // = "2F894C810EBADC6D927C5CAE9A715D84";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x89,0x4C,0x81,0x0E,0xBA,0xDC,0x6D,0x92,0x7C,0x5C,0xAE,0x9A,0x71,0x5D,0x84};

  HostStat() : xid(0), my_host_name(), rec_host(), logical_clock(0) {
  }

  virtual ~HostStat() throw() {}

  int64_t xid;
  std::set<std::string>  known_hosts;
  std::set<std::string>  heard_from;
  std::set<std::string>  alive_hosts;
  std::string my_host_name;
  std::string rec_host;
  int64_t logical_clock;

  _HostStat__isset __isset;

  void __set_xid(const int64_t val) {
    xid = val;
  }

  void __set_known_hosts(const std::set<std::string> & val) {
    known_hosts = val;
  }

  void __set_heard_from(const std::set<std::string> & val) {
    heard_from = val;
  }

  void __set_alive_hosts(const std::set<std::string> & val) {
    alive_hosts = val;
  }

  void __set_my_host_name(const std::string& val) {
    my_host_name = val;
  }

  void __set_rec_host(const std::string& val) {
    rec_host = val;
  }

  void __set_logical_clock(const int64_t val) {
    logical_clock = val;
  }

  bool operator == (const HostStat & rhs) const
  {
    if (!(xid == rhs.xid))
      return false;
    if (!(known_hosts == rhs.known_hosts))
      return false;
    if (!(heard_from == rhs.heard_from))
      return false;
    if (!(alive_hosts == rhs.alive_hosts))
      return false;
    if (!(my_host_name == rhs.my_host_name))
      return false;
    if (!(rec_host == rhs.rec_host))
      return false;
    if (!(logical_clock == rhs.logical_clock))
      return false;
    return true;
  }
  bool operator != (const HostStat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostStat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostStat &a, HostStat &b);

typedef struct _Voter__isset {
  _Voter__isset() : rec_host(false), my_host_name(false), xid(false), known_hosts(false), logical_clock(false), cur_node_mode(false) {}
  bool rec_host;
  bool my_host_name;
  bool xid;
  bool known_hosts;
  bool logical_clock;
  bool cur_node_mode;
} _Voter__isset;

class Voter {
 public:

  static const char* ascii_fingerprint; // = "A4B066E6E9E7A4AAC1E65BBE24B7905C";
  static const uint8_t binary_fingerprint[16]; // = {0xA4,0xB0,0x66,0xE6,0xE9,0xE7,0xA4,0xAA,0xC1,0xE6,0x5B,0xBE,0x24,0xB7,0x90,0x5C};

  Voter() : rec_host(), my_host_name(), xid(0), logical_clock(0), cur_node_mode(0) {
  }

  virtual ~Voter() throw() {}

  std::string rec_host;
  std::string my_host_name;
  int64_t xid;
  std::set<std::string>  known_hosts;
  int64_t logical_clock;
  int32_t cur_node_mode;

  _Voter__isset __isset;

  void __set_rec_host(const std::string& val) {
    rec_host = val;
  }

  void __set_my_host_name(const std::string& val) {
    my_host_name = val;
  }

  void __set_xid(const int64_t val) {
    xid = val;
  }

  void __set_known_hosts(const std::set<std::string> & val) {
    known_hosts = val;
  }

  void __set_logical_clock(const int64_t val) {
    logical_clock = val;
  }

  void __set_cur_node_mode(const int32_t val) {
    cur_node_mode = val;
  }

  bool operator == (const Voter & rhs) const
  {
    if (!(rec_host == rhs.rec_host))
      return false;
    if (!(my_host_name == rhs.my_host_name))
      return false;
    if (!(xid == rhs.xid))
      return false;
    if (!(known_hosts == rhs.known_hosts))
      return false;
    if (!(logical_clock == rhs.logical_clock))
      return false;
    if (!(cur_node_mode == rhs.cur_node_mode))
      return false;
    return true;
  }
  bool operator != (const Voter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Voter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Voter &a, Voter &b);

typedef struct _HBMSG__isset {
  _HBMSG__isset() : my_host_name(false), cur_node_mode(false), xid(false) {}
  bool my_host_name;
  bool cur_node_mode;
  bool xid;
} _HBMSG__isset;

class HBMSG {
 public:

  static const char* ascii_fingerprint; // = "86D97BA61768267A7CE47610E95DE354";
  static const uint8_t binary_fingerprint[16]; // = {0x86,0xD9,0x7B,0xA6,0x17,0x68,0x26,0x7A,0x7C,0xE4,0x76,0x10,0xE9,0x5D,0xE3,0x54};

  HBMSG() : my_host_name(), cur_node_mode(0), xid(0) {
  }

  virtual ~HBMSG() throw() {}

  std::string my_host_name;
  int32_t cur_node_mode;
  int64_t xid;

  _HBMSG__isset __isset;

  void __set_my_host_name(const std::string& val) {
    my_host_name = val;
  }

  void __set_cur_node_mode(const int32_t val) {
    cur_node_mode = val;
  }

  void __set_xid(const int64_t val) {
    xid = val;
  }

  bool operator == (const HBMSG & rhs) const
  {
    if (!(my_host_name == rhs.my_host_name))
      return false;
    if (!(cur_node_mode == rhs.cur_node_mode))
      return false;
    if (!(xid == rhs.xid))
      return false;
    return true;
  }
  bool operator != (const HBMSG &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HBMSG & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HBMSG &a, HBMSG &b);



#endif
