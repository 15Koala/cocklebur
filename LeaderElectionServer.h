// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#ifndef _LEADER_ELECTION_SERVER
#define _LEADER_ELECTION_SERVER

#include "gen-cpp/ElectionServ.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "Configuration.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace std;

using boost::shared_ptr;

class Cocklebur;
class ElectionServHandler : virtual public ElectionServIf {

private:
    
    ElectionServHandler(ElectionServHandler &);

public:
    explicit ElectionServHandler();
    // someone exchange voter with me. return my voter
    void exchange(Voter& _return, const Voter& voter);
    // someone ask for the candidate.
    bool isLargest(const Voter & voter);
    // recevie order.
    void sendMessage(const std::string& message);
    static Cocklebur * d_cocklebur;

};

void * startLeaderElectionServer(void * p);

#endif
