// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "../gen-cpp/DataServ.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class DataServHandler : virtual public DataServIf {
 public:
  DataServHandler() {
    // Your initialization goes here
  }

  int32_t nodeCreate(const std::string& path, const bool isBlocked) {
    // Your implementation goes here
    printf("nodeCreate\n");
  }

  int32_t nodeDelete(const std::string& path) {
    // Your implementation goes here
    printf("nodeDelete\n");
  }

  bool nodeExist(const std::string& path) {
    // Your implementation goes here
    printf("nodeExist\n");
  }

  void getData(std::string& _return, const std::string& path) {
    // Your implementation goes here
    printf("getData\n");
  }

  void setData(const std::string& path, const std::string& data) {
    // Your implementation goes here
    printf("setData\n");
  }

  void getChildren(std::vector<Node> & _return, const std::string& path) {
    // Your implementation goes here
    printf("getChildren\n");
  }

  void getDataTree(DataTree& _return) {
    // Your implementation goes here
    printf("getDataTree\n");
  }

  void getLogEntryList(std::vector<LogEntry> & _return, const int64_t xid) {
    // Your implementation goes here
    printf("getLogEntryList\n");
  }

};

int startDataServer( int port ) {
  
  shared_ptr<DataServHandler> handler(new DataServHandler());
  shared_ptr<TProcessor> processor(new DataServProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

