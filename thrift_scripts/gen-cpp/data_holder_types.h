/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef data_holder_TYPES_H
#define data_holder_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _LogEntry__isset {
  _LogEntry__isset() : xid(false), ts(false), oper(false) {}
  bool xid;
  bool ts;
  bool oper;
} _LogEntry__isset;

class LogEntry {
 public:

  static const char* ascii_fingerprint; // = "6B0CD68886A371B59CE1B9EDCF067801";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0x0C,0xD6,0x88,0x86,0xA3,0x71,0xB5,0x9C,0xE1,0xB9,0xED,0xCF,0x06,0x78,0x01};

  LogEntry() : xid(0), ts(0), oper() {
  }

  virtual ~LogEntry() throw() {}

  int64_t xid;
  int64_t ts;
  std::string oper;

  _LogEntry__isset __isset;

  void __set_xid(const int64_t val) {
    xid = val;
  }

  void __set_ts(const int64_t val) {
    ts = val;
  }

  void __set_oper(const std::string& val) {
    oper = val;
  }

  bool operator == (const LogEntry & rhs) const
  {
    if (!(xid == rhs.xid))
      return false;
    if (!(ts == rhs.ts))
      return false;
    if (!(oper == rhs.oper))
      return false;
    return true;
  }
  bool operator != (const LogEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LogEntry &a, LogEntry &b);

typedef struct _Node__isset {
  _Node__isset() : children(false), parent(false), ctime(false), mtime(false), data(false), data_version(false) {}
  bool children;
  bool parent;
  bool ctime;
  bool mtime;
  bool data;
  bool data_version;
} _Node__isset;

class Node {
 public:

  static const char* ascii_fingerprint; // = "59C1C05EFC689C35A13EED304D938C57";
  static const uint8_t binary_fingerprint[16]; // = {0x59,0xC1,0xC0,0x5E,0xFC,0x68,0x9C,0x35,0xA1,0x3E,0xED,0x30,0x4D,0x93,0x8C,0x57};

  Node() : parent(), ctime(0), mtime(0), data(), data_version(0) {
  }

  virtual ~Node() throw() {}

  std::set<std::string>  children;
  std::string parent;
  int64_t ctime;
  int64_t mtime;
  std::string data;
  int64_t data_version;

  _Node__isset __isset;

  void __set_children(const std::set<std::string> & val) {
    children = val;
  }

  void __set_parent(const std::string& val) {
    parent = val;
  }

  void __set_ctime(const int64_t val) {
    ctime = val;
  }

  void __set_mtime(const int64_t val) {
    mtime = val;
  }

  void __set_data(const std::string& val) {
    data = val;
  }

  void __set_data_version(const int64_t val) {
    data_version = val;
  }

  bool operator == (const Node & rhs) const
  {
    if (!(children == rhs.children))
      return false;
    if (!(parent == rhs.parent))
      return false;
    if (!(ctime == rhs.ctime))
      return false;
    if (!(mtime == rhs.mtime))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(data_version == rhs.data_version))
      return false;
    return true;
  }
  bool operator != (const Node &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Node & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Node &a, Node &b);

typedef struct _DataTree__isset {
  _DataTree__isset() : NodeMap(false), xid(false), ephemerals(false) {}
  bool NodeMap;
  bool xid;
  bool ephemerals;
} _DataTree__isset;

class DataTree {
 public:

  static const char* ascii_fingerprint; // = "16868C5EAD11733134E2BC8FE688F3A2";
  static const uint8_t binary_fingerprint[16]; // = {0x16,0x86,0x8C,0x5E,0xAD,0x11,0x73,0x31,0x34,0xE2,0xBC,0x8F,0xE6,0x88,0xF3,0xA2};

  DataTree() : xid(0) {
  }

  virtual ~DataTree() throw() {}

  std::map<std::string, Node>  NodeMap;
  int64_t xid;
  std::map<std::string, Node>  ephemerals;

  _DataTree__isset __isset;

  void __set_NodeMap(const std::map<std::string, Node> & val) {
    NodeMap = val;
  }

  void __set_xid(const int64_t val) {
    xid = val;
  }

  void __set_ephemerals(const std::map<std::string, Node> & val) {
    ephemerals = val;
  }

  bool operator == (const DataTree & rhs) const
  {
    if (!(NodeMap == rhs.NodeMap))
      return false;
    if (!(xid == rhs.xid))
      return false;
    if (!(ephemerals == rhs.ephemerals))
      return false;
    return true;
  }
  bool operator != (const DataTree &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataTree & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DataTree &a, DataTree &b);



#endif
