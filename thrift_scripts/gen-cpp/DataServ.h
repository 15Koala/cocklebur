/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DataServ_H
#define DataServ_H

#include <thrift/TDispatchProcessor.h>
#include "data_holder_types.h"



class DataServIf {
 public:
  virtual ~DataServIf() {}
  virtual int32_t nodeCreate(const std::string& path, const bool isBlocked) = 0;
  virtual int32_t nodeDelete(const std::string& path) = 0;
  virtual bool nodeExist(const std::string& path) = 0;
  virtual void getData(std::string& _return, const std::string& path) = 0;
  virtual void setData(const std::string& path, const std::string& data) = 0;
  virtual void getChildren(std::vector<Node> & _return, const std::string& path) = 0;
  virtual void getDataTree(DataTree& _return) = 0;
  virtual void getLogEntryList(std::vector<LogEntry> & _return, const int64_t xid) = 0;
};

class DataServIfFactory {
 public:
  typedef DataServIf Handler;

  virtual ~DataServIfFactory() {}

  virtual DataServIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DataServIf* /* handler */) = 0;
};

class DataServIfSingletonFactory : virtual public DataServIfFactory {
 public:
  DataServIfSingletonFactory(const boost::shared_ptr<DataServIf>& iface) : iface_(iface) {}
  virtual ~DataServIfSingletonFactory() {}

  virtual DataServIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DataServIf* /* handler */) {}

 protected:
  boost::shared_ptr<DataServIf> iface_;
};

class DataServNull : virtual public DataServIf {
 public:
  virtual ~DataServNull() {}
  int32_t nodeCreate(const std::string& /* path */, const bool /* isBlocked */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t nodeDelete(const std::string& /* path */) {
    int32_t _return = 0;
    return _return;
  }
  bool nodeExist(const std::string& /* path */) {
    bool _return = false;
    return _return;
  }
  void getData(std::string& /* _return */, const std::string& /* path */) {
    return;
  }
  void setData(const std::string& /* path */, const std::string& /* data */) {
    return;
  }
  void getChildren(std::vector<Node> & /* _return */, const std::string& /* path */) {
    return;
  }
  void getDataTree(DataTree& /* _return */) {
    return;
  }
  void getLogEntryList(std::vector<LogEntry> & /* _return */, const int64_t /* xid */) {
    return;
  }
};

typedef struct _DataServ_nodeCreate_args__isset {
  _DataServ_nodeCreate_args__isset() : path(false), isBlocked(false) {}
  bool path;
  bool isBlocked;
} _DataServ_nodeCreate_args__isset;

class DataServ_nodeCreate_args {
 public:

  DataServ_nodeCreate_args() : path(), isBlocked(0) {
  }

  virtual ~DataServ_nodeCreate_args() throw() {}

  std::string path;
  bool isBlocked;

  _DataServ_nodeCreate_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_isBlocked(const bool val) {
    isBlocked = val;
  }

  bool operator == (const DataServ_nodeCreate_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(isBlocked == rhs.isBlocked))
      return false;
    return true;
  }
  bool operator != (const DataServ_nodeCreate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataServ_nodeCreate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataServ_nodeCreate_pargs {
 public:


  virtual ~DataServ_nodeCreate_pargs() throw() {}

  const std::string* path;
  const bool* isBlocked;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataServ_nodeCreate_result__isset {
  _DataServ_nodeCreate_result__isset() : success(false) {}
  bool success;
} _DataServ_nodeCreate_result__isset;

class DataServ_nodeCreate_result {
 public:

  DataServ_nodeCreate_result() : success(0) {
  }

  virtual ~DataServ_nodeCreate_result() throw() {}

  int32_t success;

  _DataServ_nodeCreate_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const DataServ_nodeCreate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataServ_nodeCreate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataServ_nodeCreate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataServ_nodeCreate_presult__isset {
  _DataServ_nodeCreate_presult__isset() : success(false) {}
  bool success;
} _DataServ_nodeCreate_presult__isset;

class DataServ_nodeCreate_presult {
 public:


  virtual ~DataServ_nodeCreate_presult() throw() {}

  int32_t* success;

  _DataServ_nodeCreate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataServ_nodeDelete_args__isset {
  _DataServ_nodeDelete_args__isset() : path(false) {}
  bool path;
} _DataServ_nodeDelete_args__isset;

class DataServ_nodeDelete_args {
 public:

  DataServ_nodeDelete_args() : path() {
  }

  virtual ~DataServ_nodeDelete_args() throw() {}

  std::string path;

  _DataServ_nodeDelete_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  bool operator == (const DataServ_nodeDelete_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const DataServ_nodeDelete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataServ_nodeDelete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataServ_nodeDelete_pargs {
 public:


  virtual ~DataServ_nodeDelete_pargs() throw() {}

  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataServ_nodeDelete_result__isset {
  _DataServ_nodeDelete_result__isset() : success(false) {}
  bool success;
} _DataServ_nodeDelete_result__isset;

class DataServ_nodeDelete_result {
 public:

  DataServ_nodeDelete_result() : success(0) {
  }

  virtual ~DataServ_nodeDelete_result() throw() {}

  int32_t success;

  _DataServ_nodeDelete_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const DataServ_nodeDelete_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataServ_nodeDelete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataServ_nodeDelete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataServ_nodeDelete_presult__isset {
  _DataServ_nodeDelete_presult__isset() : success(false) {}
  bool success;
} _DataServ_nodeDelete_presult__isset;

class DataServ_nodeDelete_presult {
 public:


  virtual ~DataServ_nodeDelete_presult() throw() {}

  int32_t* success;

  _DataServ_nodeDelete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataServ_nodeExist_args__isset {
  _DataServ_nodeExist_args__isset() : path(false) {}
  bool path;
} _DataServ_nodeExist_args__isset;

class DataServ_nodeExist_args {
 public:

  DataServ_nodeExist_args() : path() {
  }

  virtual ~DataServ_nodeExist_args() throw() {}

  std::string path;

  _DataServ_nodeExist_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  bool operator == (const DataServ_nodeExist_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const DataServ_nodeExist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataServ_nodeExist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataServ_nodeExist_pargs {
 public:


  virtual ~DataServ_nodeExist_pargs() throw() {}

  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataServ_nodeExist_result__isset {
  _DataServ_nodeExist_result__isset() : success(false) {}
  bool success;
} _DataServ_nodeExist_result__isset;

class DataServ_nodeExist_result {
 public:

  DataServ_nodeExist_result() : success(0) {
  }

  virtual ~DataServ_nodeExist_result() throw() {}

  bool success;

  _DataServ_nodeExist_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const DataServ_nodeExist_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataServ_nodeExist_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataServ_nodeExist_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataServ_nodeExist_presult__isset {
  _DataServ_nodeExist_presult__isset() : success(false) {}
  bool success;
} _DataServ_nodeExist_presult__isset;

class DataServ_nodeExist_presult {
 public:


  virtual ~DataServ_nodeExist_presult() throw() {}

  bool* success;

  _DataServ_nodeExist_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataServ_getData_args__isset {
  _DataServ_getData_args__isset() : path(false) {}
  bool path;
} _DataServ_getData_args__isset;

class DataServ_getData_args {
 public:

  DataServ_getData_args() : path() {
  }

  virtual ~DataServ_getData_args() throw() {}

  std::string path;

  _DataServ_getData_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  bool operator == (const DataServ_getData_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const DataServ_getData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataServ_getData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataServ_getData_pargs {
 public:


  virtual ~DataServ_getData_pargs() throw() {}

  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataServ_getData_result__isset {
  _DataServ_getData_result__isset() : success(false) {}
  bool success;
} _DataServ_getData_result__isset;

class DataServ_getData_result {
 public:

  DataServ_getData_result() : success() {
  }

  virtual ~DataServ_getData_result() throw() {}

  std::string success;

  _DataServ_getData_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DataServ_getData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataServ_getData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataServ_getData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataServ_getData_presult__isset {
  _DataServ_getData_presult__isset() : success(false) {}
  bool success;
} _DataServ_getData_presult__isset;

class DataServ_getData_presult {
 public:


  virtual ~DataServ_getData_presult() throw() {}

  std::string* success;

  _DataServ_getData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataServ_setData_args__isset {
  _DataServ_setData_args__isset() : path(false), data(false) {}
  bool path;
  bool data;
} _DataServ_setData_args__isset;

class DataServ_setData_args {
 public:

  DataServ_setData_args() : path(), data() {
  }

  virtual ~DataServ_setData_args() throw() {}

  std::string path;
  std::string data;

  _DataServ_setData_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_data(const std::string& val) {
    data = val;
  }

  bool operator == (const DataServ_setData_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const DataServ_setData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataServ_setData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataServ_setData_pargs {
 public:


  virtual ~DataServ_setData_pargs() throw() {}

  const std::string* path;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataServ_setData_result {
 public:

  DataServ_setData_result() {
  }

  virtual ~DataServ_setData_result() throw() {}


  bool operator == (const DataServ_setData_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DataServ_setData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataServ_setData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataServ_setData_presult {
 public:


  virtual ~DataServ_setData_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataServ_getChildren_args__isset {
  _DataServ_getChildren_args__isset() : path(false) {}
  bool path;
} _DataServ_getChildren_args__isset;

class DataServ_getChildren_args {
 public:

  DataServ_getChildren_args() : path() {
  }

  virtual ~DataServ_getChildren_args() throw() {}

  std::string path;

  _DataServ_getChildren_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  bool operator == (const DataServ_getChildren_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const DataServ_getChildren_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataServ_getChildren_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataServ_getChildren_pargs {
 public:


  virtual ~DataServ_getChildren_pargs() throw() {}

  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataServ_getChildren_result__isset {
  _DataServ_getChildren_result__isset() : success(false) {}
  bool success;
} _DataServ_getChildren_result__isset;

class DataServ_getChildren_result {
 public:

  DataServ_getChildren_result() {
  }

  virtual ~DataServ_getChildren_result() throw() {}

  std::vector<Node>  success;

  _DataServ_getChildren_result__isset __isset;

  void __set_success(const std::vector<Node> & val) {
    success = val;
  }

  bool operator == (const DataServ_getChildren_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataServ_getChildren_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataServ_getChildren_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataServ_getChildren_presult__isset {
  _DataServ_getChildren_presult__isset() : success(false) {}
  bool success;
} _DataServ_getChildren_presult__isset;

class DataServ_getChildren_presult {
 public:


  virtual ~DataServ_getChildren_presult() throw() {}

  std::vector<Node> * success;

  _DataServ_getChildren_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DataServ_getDataTree_args {
 public:

  DataServ_getDataTree_args() {
  }

  virtual ~DataServ_getDataTree_args() throw() {}


  bool operator == (const DataServ_getDataTree_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DataServ_getDataTree_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataServ_getDataTree_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataServ_getDataTree_pargs {
 public:


  virtual ~DataServ_getDataTree_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataServ_getDataTree_result__isset {
  _DataServ_getDataTree_result__isset() : success(false) {}
  bool success;
} _DataServ_getDataTree_result__isset;

class DataServ_getDataTree_result {
 public:

  DataServ_getDataTree_result() {
  }

  virtual ~DataServ_getDataTree_result() throw() {}

  DataTree success;

  _DataServ_getDataTree_result__isset __isset;

  void __set_success(const DataTree& val) {
    success = val;
  }

  bool operator == (const DataServ_getDataTree_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataServ_getDataTree_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataServ_getDataTree_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataServ_getDataTree_presult__isset {
  _DataServ_getDataTree_presult__isset() : success(false) {}
  bool success;
} _DataServ_getDataTree_presult__isset;

class DataServ_getDataTree_presult {
 public:


  virtual ~DataServ_getDataTree_presult() throw() {}

  DataTree* success;

  _DataServ_getDataTree_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataServ_getLogEntryList_args__isset {
  _DataServ_getLogEntryList_args__isset() : xid(false) {}
  bool xid;
} _DataServ_getLogEntryList_args__isset;

class DataServ_getLogEntryList_args {
 public:

  DataServ_getLogEntryList_args() : xid(0) {
  }

  virtual ~DataServ_getLogEntryList_args() throw() {}

  int64_t xid;

  _DataServ_getLogEntryList_args__isset __isset;

  void __set_xid(const int64_t val) {
    xid = val;
  }

  bool operator == (const DataServ_getLogEntryList_args & rhs) const
  {
    if (!(xid == rhs.xid))
      return false;
    return true;
  }
  bool operator != (const DataServ_getLogEntryList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataServ_getLogEntryList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataServ_getLogEntryList_pargs {
 public:


  virtual ~DataServ_getLogEntryList_pargs() throw() {}

  const int64_t* xid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataServ_getLogEntryList_result__isset {
  _DataServ_getLogEntryList_result__isset() : success(false) {}
  bool success;
} _DataServ_getLogEntryList_result__isset;

class DataServ_getLogEntryList_result {
 public:

  DataServ_getLogEntryList_result() {
  }

  virtual ~DataServ_getLogEntryList_result() throw() {}

  std::vector<LogEntry>  success;

  _DataServ_getLogEntryList_result__isset __isset;

  void __set_success(const std::vector<LogEntry> & val) {
    success = val;
  }

  bool operator == (const DataServ_getLogEntryList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataServ_getLogEntryList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataServ_getLogEntryList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataServ_getLogEntryList_presult__isset {
  _DataServ_getLogEntryList_presult__isset() : success(false) {}
  bool success;
} _DataServ_getLogEntryList_presult__isset;

class DataServ_getLogEntryList_presult {
 public:


  virtual ~DataServ_getLogEntryList_presult() throw() {}

  std::vector<LogEntry> * success;

  _DataServ_getLogEntryList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DataServClient : virtual public DataServIf {
 public:
  DataServClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DataServClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t nodeCreate(const std::string& path, const bool isBlocked);
  void send_nodeCreate(const std::string& path, const bool isBlocked);
  int32_t recv_nodeCreate();
  int32_t nodeDelete(const std::string& path);
  void send_nodeDelete(const std::string& path);
  int32_t recv_nodeDelete();
  bool nodeExist(const std::string& path);
  void send_nodeExist(const std::string& path);
  bool recv_nodeExist();
  void getData(std::string& _return, const std::string& path);
  void send_getData(const std::string& path);
  void recv_getData(std::string& _return);
  void setData(const std::string& path, const std::string& data);
  void send_setData(const std::string& path, const std::string& data);
  void recv_setData();
  void getChildren(std::vector<Node> & _return, const std::string& path);
  void send_getChildren(const std::string& path);
  void recv_getChildren(std::vector<Node> & _return);
  void getDataTree(DataTree& _return);
  void send_getDataTree();
  void recv_getDataTree(DataTree& _return);
  void getLogEntryList(std::vector<LogEntry> & _return, const int64_t xid);
  void send_getLogEntryList(const int64_t xid);
  void recv_getLogEntryList(std::vector<LogEntry> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DataServProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DataServIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DataServProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_nodeCreate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_nodeDelete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_nodeExist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getChildren(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDataTree(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLogEntryList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DataServProcessor(boost::shared_ptr<DataServIf> iface) :
    iface_(iface) {
    processMap_["nodeCreate"] = &DataServProcessor::process_nodeCreate;
    processMap_["nodeDelete"] = &DataServProcessor::process_nodeDelete;
    processMap_["nodeExist"] = &DataServProcessor::process_nodeExist;
    processMap_["getData"] = &DataServProcessor::process_getData;
    processMap_["setData"] = &DataServProcessor::process_setData;
    processMap_["getChildren"] = &DataServProcessor::process_getChildren;
    processMap_["getDataTree"] = &DataServProcessor::process_getDataTree;
    processMap_["getLogEntryList"] = &DataServProcessor::process_getLogEntryList;
  }

  virtual ~DataServProcessor() {}
};

class DataServProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DataServProcessorFactory(const ::boost::shared_ptr< DataServIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DataServIfFactory > handlerFactory_;
};

class DataServMultiface : virtual public DataServIf {
 public:
  DataServMultiface(std::vector<boost::shared_ptr<DataServIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DataServMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DataServIf> > ifaces_;
  DataServMultiface() {}
  void add(boost::shared_ptr<DataServIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t nodeCreate(const std::string& path, const bool isBlocked) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->nodeCreate(path, isBlocked);
    }
    return ifaces_[i]->nodeCreate(path, isBlocked);
  }

  int32_t nodeDelete(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->nodeDelete(path);
    }
    return ifaces_[i]->nodeDelete(path);
  }

  bool nodeExist(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->nodeExist(path);
    }
    return ifaces_[i]->nodeExist(path);
  }

  void getData(std::string& _return, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getData(_return, path);
    }
    ifaces_[i]->getData(_return, path);
    return;
  }

  void setData(const std::string& path, const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setData(path, data);
    }
    ifaces_[i]->setData(path, data);
  }

  void getChildren(std::vector<Node> & _return, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getChildren(_return, path);
    }
    ifaces_[i]->getChildren(_return, path);
    return;
  }

  void getDataTree(DataTree& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDataTree(_return);
    }
    ifaces_[i]->getDataTree(_return);
    return;
  }

  void getLogEntryList(std::vector<LogEntry> & _return, const int64_t xid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLogEntryList(_return, xid);
    }
    ifaces_[i]->getLogEntryList(_return, xid);
    return;
  }

};



#endif
